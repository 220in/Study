# 01. 엔터티(ENTITY) 이해하기

- 엔터티: 업무에 필요한 정보를 저장/관리하기 위한 집합적인 개념
- 단순화,추상화,명확화
- 인스턴스(INSTANCE) : 엔터티 집합 내에 존재하는 개별적인 대상
- A 회사의 직원들 ⇒ 엔터티: 직원, 인스턴스 : 개별직원

### 엔터티의 특징(9,10,11번)

   1. 반드시 업무에서 필요한 대상이고 업무에 사용될 것

   2. 유일한 식별자로 식별이 가능할 것

   3. 인스턴스가 2개 이상일 것

   4. 속성이 반드시 2개 이상 존재할 것

   5. 관계가 하나 이상 존재할 것(단 코드성,통계성은 생략 가능)

### 코드성, 통계성이란?

- 코드성은 관계연결을 안한다.
- 통계성 : 테이블을 정리해서 통계를 낸 테이블 자체로 관계가 생긴다.

### 엔터티의 분류(12번)

- **유무형에 따라 분류**

      - 유형 : 물리적 형태가 있는 엔터티 → 직원,주류 ,강사, 고객

      - 개념: 물리적 형태가 없는 엔터티 → 부서,과목,계급

      - 사건 : 업무 수행중에 발생하는 엔터티 → 강의,매출,주문,상담

- **발생시점에 따라 분류**

      - 기본/키 : 본래 업무에 존재하는 정보 독립 생성가능, 주식별자 보유 → 직원,고객,상품

      - 중심 : 기본 엔터티로부터 발생 업무에 있어 중심 역할 → 주문,매출,계약 

      - 행위 : 내용이 자주 바뀌고 데이터 증가 → 주문이력,고객이력

### 엔터티의 명명 규칙(13번)

    1. 가능한 현업 용어를 쓴다 → 사람: 고객, 전봇대 : 전주

    2. 가능하면 약어를 사용하지 않는다.

    3. 단수 명사를 사용한다 . → 직원들 : 직원 , 주문내역들 : 주문내역

    4. 엔터티 이름을 유일해야 한다.

    5. 엔터티 생성의미대로 이름을 부여한다. → 연락처목록 : 직원연락처목록

## 02. 속성 이해하기

### 속성이란 ?(14번)

- 업무상 관리하기 위해 의미적으로 더는 분리되지 않는 최소의 데이터 단위

### 엔터티, 인스턴스 ,속성의 관계(15번)

  1. 하나의 엔터티는 2개 이상의 인스턴스를 가진다.

  2. 하나의 엔터티는 2개 이상의 속성을 가진다.

  3. 속성은 각 인스턴스를 설명해줄 수 있다.

  4. 하나의 속성에는 하나의 속성값만 들어간다.

### 식별자란?

- 엔터티 내 유일한 인스턴스를 식별할 수 있는 속성의 집합

### 속성의 분류(16,17번)

- **구성 방식에 따른 분류**

     - PK ,FK ,일반속성 , 복합속성

- **특성에 따른 분류**

      - 기본 : 업무로부터 추출한 속성으로 제일 많이 발생

      - 설계 : 설계시 규칙화 등이 필요해 만든 속성 코드성이나 일렬번호 등

      - 파생 : 다른 속성들로부터 계산/변형되어 만들어진 속성

### 속성 명명 규칙(19번)

  1. 가능한 현업 용어를 쓴다

  2. 가능하면 약어를 사용하지 않는다.

  3. 명사형을 쓰고 서술식이나 수식어 등을 제한한다. → 오늘배송된상품 : 일배송상품

  4. 가능한 속성 이름은 전체 데이터 모델에서 유일해야 한다.

### 도메인이란?(18번)

- 각 속성이 입력 받을 수 있는 값의 정의 및 범위를 의미
- 보통 테이블을 만들 때 각 속성마다 자료형 및 제약조건을 줄 때 결정된다.

 

## 03. 관계(Relationship)이해하기

### 관계란?(20번)

- 엔터티 내의 인스턴스들 간에 서로 논리적인 연관성이 있는 상태
- 직원은 부서에 → 소속되다, 부서는 직원을 → 보유하다 는 관계

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/920a1984-f67e-4786-a5b7-8ad707745aba/Untitled.png)

### 관계를 표시하는 방법(21,22번)

- 관계명(Membership), 관계차수(Cardinality/Degree) , 관계선택사양(Optionality)

    1. 관계명을 표시한다. 이때 애매한 동사나 과거형은 피한다.

    2. 관계차수는 엔터티 내 각 인스턴스들이 얼마나 참여하는지를 의미한다.(1:1 , 1:M , M:N)

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/0f7c453f-4daa-43fb-8b5a-0001c3d2fdd2/Untitled.png)

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/b28ae108-59fc-442c-af71-4bd4234d86e6/Untitled.png)

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/cd875def-0b3a-4a63-8ad9-74812b44ea64/Untitled.png)

       3. 관계선택사양은 엔터티 내 각 인스턴스들이 필수/선택 참여하는지를 의미한다.

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/b431ab87-243b-4e85-9120-0f5d735132da/Untitled.png)

### 관계 체크 사항(23,24번)

  1. 두 엔터티 사이에 관심있는 연관규칙이 있는가?

  2. 두 엔터티 사이에 정보의 조합이 발생하는가?

  3. 업무기술서, 장표에 관계연결에 대한 규칙이 서술 되었는가?

  4. 업무기술서, 장표에 관계연결을 가능케 하는 동사(Verb) 가 있는가?

## 04.~05. 식별자 & 데이터 모델 이해하기

### 데이터 모델링이란?(1,2번)

- 현실세계의 복잡한 대상을 단순하게 표현하기 위해 추상화,단순화,명확하 하여 일정표기법으로 표시하는 것으로 계획/분석/설계 시 업무분석 및 설계 ,설명에 사용, 구축/운영시에는 변경, 관리 목적으로 사용

### 데이터 모델링 3단계(개념-논리-물리)(5번)

- **개념적 데이터 모델링**

      - 추상적, 업무 중심적, 포괄적, 전사적(EA), DBMS독립적 , ERD생성

- **논리적 데이터 모델링**

      - KEY, 업무 , 속성, 관계 등 정의

      - 재사용성이 높음

      - 특정 DBMS에 종속적

      - 정규화 수행 → 데이터 중복 방지

- **물리적 데이터 모델링**

      - 실제 DB에 이식되도록 성능, 저장 등 물리적 성격 고려

      - 수준이 구체적임

### ERD란?(7,8번)

- 엔터티와 엔터티 간의 관계를 발견하고 이를 그림(Diagram)으로 표현하는 행위로 개념적 데이터 모델링의 결과물이다.

### 데이터베이스 모델링 - 개념적 모델링

 1. 엔터티를 그린다. 보통 중요한 엔터티를 왼쪽 상단에 둔다.

 2. 엔터티를 적절히 배치한다.

1. 관계를 설정한다.
2. 관계명을 기술한다.
3. 관계의 참여도를 기술한다.

      - 참여도란 엔터티 안의 인스턴스들이 얼마나 참여하는지를 의미한다.

 6.  관계의 필수여부를 기술한다 

     - 필수여부란 엔터티 안의 인스턴스들이 반드시 참여하는지를 의미한다.

     - 최소참여시는 ( I )표시

### 데이터베이스 모델링 - 논리적 모델링

1. 속성을 아래로 모두 입력한다.
2. 각 엔터티에서 식별자(PRIMARY KEY)를 선택합니다.
3. 정규화를 수행해 중복되는 데이터 입력이 없도록 합니다.
4. 관계설정(FOREIGN KEY)을 한다. → 정규화로 쪼개진 대상들을 연결하기 위해 식별자를 불러온다.

### 데이터 모델링이 왜 중요할까? (3번)

  1. 파급효과 : 초반에 엉망으로 설계하고 개발하다가  나중에 엎게 되면 힘들어짐

  2. 간결한 표현 : 서로 의사소통을 위해 모델링된 설계도(ERD 등) 으로 쉽게 이해가능

  3. 데이터 품질 : 애초에 데이터 모델링을 제대로 해야 이상한 데이터가 안 들어감 → 데이터 중복, 비  유연성, 비일관성 ( 4번)

### 논리적 모델링 표기법 2가지

- **IE 표기법**

      1. 구분된 선 위에는 PK(식별자) 임

      2. FK라고 붙은 속성은 빌려온 외래기(FK)

      3. 그 외 아무것도 안적힌 속성은 “일반속성”

      4. 관계차수나 관계선택사양은 그대로 작성

      5. 관계선이 점선이라면 “비식별자관계”

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/1d9674cf-68a6-421d-8a3c-7769af3b435a/Untitled.png)

- **Backer 표기법**

     1. #는 pk(식별자) 임

     2. O 는 선택사항, *는 필수사항 임을 의미

     3. 관계 차수나 관계선택사양은 그대로 작성

     4. 여기는 FK가 O이므로 “비식별자관계”임

         (#였으면 식별자 관계)

### 데이터베이스 3단계 구조

    1. 외부 스키마 : 여러 사용자 각각의 관점

    2. 개념 스키마 : 통합적, 조직 전체의 DB관점

    3. 내부 스키마 : 데이터 물리 저장 구조 표현

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/46e8d91d-69a9-40e5-bab6-917352d18a0b/Untitled.png)

### **식별자의 분류(26번)**

     1. 대표성 여부 : 주식별자 VS 보조 식별자

     2. 스스로생성여부 : 내부식별자 VS 외부식별자

     3. 단일속성여부 : 단일식별자 VS 복합식별자

     4. 대체여부 : 본질식별자 VS 인조식별자

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/1228bb31-d1ad-4ac2-b4e4-e0a0b8b0d366/Untitled.png)

### 주식별자 도출기준(27,28번)

   1. 업무에서 자주 쓰는 속성일 것

   2. 명칭, 이름 등은 피할 것

   3. 속성의 수가 많지 않을 것

### 주식별자 특징(25번)

   1. 유일성 : 인스턴스를 유일하게 식별하기

   2. 최소성 : 속성의 수가 많지 않기

   3. 불변성 : 가급적 변하지 않기

    4. 존재성 : 값이 꼭 입력되기

### 식별자관계(=강한 연결관계) VS 비식별자 관계(=약한 연결관계) (7번)

- 식별자관계 : 외래키(빌려온 키)가 PK(식별자)의 일부분인가?
- 비식별자관계 : 외래키(빌려온 키)가 PK(식별자)의 일부분이 아닌가?

- **IE 표기법**

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/7cd86a54-3894-448a-9c6b-76b77fe1ab10/Untitled.png)

- **Backer 표기법**

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/2d4639e4-470d-484c-87cb-1885ba9878fd/Untitled.png)

### 식별자관계 VS 비식별자 관계 고려사항(29,30번)

          1.  자식 엔터티의 인스턴스 생성이 부모에게 종속? 독립?

          2. 부모 엔터티의 인스턴스가 사라질 때 자식도 사라져? 남겨?

          3. 상속받은 주식별자 속성을 타 엔터티에 이전 필요? 차단?

          4. 조회하는 쿼리가 점점 길어진다면?
