<< Android 4대 컴포넌트 >>
컴포넌트 : 앱의 구성단위, 컴포넌트를 조합하여 하나의 앱을 만드는 것을 의미
1. Activity : UI 화면을 담당하는 컴포넌트
2. Service  : 화면에 존재하지 않고 백그라운드에서 실행되는 컴포넌트
   - 포그라운드 서비스 : 알림을 표시해 놓고 사용자와 상호작용하지 않아도 계속 실행되는 것을 의미
   - 백그라운드 서비스 : 사용자가 직접 알지 못하는 작업을 수행할 때 사용
   - 바운드 서비스 : 앱 내에서 서비스를 사용하여 간단한 클라이언트 : 서버 환경을 구성하는 것을 말함 (특정 컴포넌트와 서비스간 상호작용)
   startService : 단순 서비스를 시작, 종료하게 하는 서비스 
   생명주기 : onCreate - onStartComman - onDestroy
   ex ) START_STICKY : 안드로이드가 서비스를 강제 정지한 경우 , null intent를 보내서 재시작한다.
        START_NOT_STICKY : 안드로이드가 서비스를 강제 정지한 경우, 재시작 하지 않는다.
        START_REDELIVER_INTENT : 안드로이드가 서비스를 강제 정지한 경우 , 동일한 intent를 보내서 재시작한다.
        
   bindService : 특정 컴포넌트와 서비스간 상호작용이 있을 때 사용하는 서비스이다.
   생명주기 : onCreate - onBind - onUnbind - onDestroy
   
3. Broadcast Receiver : 단말기에서 발생하는 다양한 이벤트, 정보를 받고 반응하는 컴포넌트
   정적 리시버 : 매니펫트에 등록하여 리시버를 구현하는 형태인데 한 번 등록하면 해제할 수 없는 방식이다.
   동적 리시버 : 클래스 파일에서 리시버를 등록, 해제할 수 있는 형태이기 때문에 앱에 부하를 줄일 수 있다. ( 해제를 적절히 해주지 않는다면 메모리 릭발생!)
   * 리시버에는 너무 많은 작업, 시간이 오래걸리는 작업을 하면 안된다. 처리 지연시간이 길어진 경우 ANR이 발생하기 때문에 리시버에는 간단한 일을 처리하도록 하고,
     스레드를 별도로 생성해서 처리하도록 해야한다.

4. Content Provider : 데이터를 저장하고, 가져오고 , 모든 App에서 접근할 수 있도록하는 컴포넌트



<< MVC 패턴 >
Model : 어플리케이션에서 사용되는 데이터와 그 데이터를 처리하는 부분
View : 사용자에서 보여지는 UI 부분
Controller : 사용자의 입력(Action)을 받고 처리하는 부분

동작 순서
1. 사용자의 Action들은 Controller에 들어오게 됩니다.
2. Controller는 사용자의 Action를 확인하고, Model을 업데이트합니다.
3. Controller는 Model을 나타내줄 View를 선택합니다.
4. View는 Model을 이용하여 화면을 나타냅니다

  Controller는 여러개의 View를 선택할 수 있는 1:n 구조입니다.
  Controller는 View를 선택할 뿐 직접 업데이트 하지 않습니다.
  
장점: 단순하여 보편적으로 많이 사용되는 디자인 패턴
단점: View와 Model 사이의 의존성이 높아 어플리케이션이 커질 수록 복잡해지고
      유지보수가 어렵게 만들수 있다.

<< MVP 패턴>> 
 Model + View + Presenter => Controller 대신 Presenter가 존재
 Presenter : View에서 요청한 정보로 Model을 가공하여 View에 전달해주는 부분
            (View와 Model을 붙여주는 접착제 역할)
               
동작 순서      
1. 사용자의 Action들은 View를 통해 들어오게 됩니다.
2. View는 데이터를 Presenter에 요청합니다.
3. Presenter는 Model에게 데이터를 요청합니다.
4. Model은 Presenter에서 요청받은 데이터를 응답합니다.
5. Presenter는 View에게 데이터를 응답합니다.
6. View는 Presenter가 응답한 데이터를 이용하여 화면을 나타냅니다.
* Presenter는 View와 Model의 인스턴스를 가지고 있어 둘을 연결하는 접착제 역할을 한다.

장점 : View와 Model의 의존성이 없다 
단점 : View와 Presenter 사이의 의존성이 높아짐

<< MVVM 패턴 >>
Model + View + ViewModel를 합친 용어 => ViewModel : View를 표현하는 Model 이자 나타내기 위한 데이터를 처리하는 부분 

동작 순서
1. 사용자의 Action들은 View를 통해 들어오게 됩니다.
2. View에 Action이 들어오면, Command 패턴으로 View Model에 Action을 전달합니다.
3. View Model은 Model에게 데이터를 요청합니다.
4. Model은 View Model에게 요청받은 데이터를 응답합니다.
5. View Model은 응답 받은 데이터를 가공하여 저장합니다.
6. View는 View Model과 Data Binding하여 화면을 나타냅니다.

장점 : 의존성 x ,독립적 => 모듈화 하여 개발 가능 
단점 : View Model의 설계가 쉽지 않다.
      
